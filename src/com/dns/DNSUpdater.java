package com.dns;

import java.net.URL;
import java.util.Arrays;
import java.util.logging.Level;

import com.dns.configuration.Options;
import com.dns.core.handlers.ColourHandler;
import com.dns.core.handlers.VersionHandler;
import com.dns.core.helpers.LogHelper;
import com.dns.core.proxy.CommonProxy;
import com.dns.lib.Reference;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.Mod.PreInit;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkMod;

@Mod(modid = Reference.modID, version = Reference.version, name = Reference.modName)
@NetworkMod(clientSideRequired = true, serverSideRequired = false)
public class DNSUpdater {

    @Instance(Reference.modID)
    public static DNSUpdater instance;

    @SidedProxy(clientSide = Reference.client, serverSide = Reference.common)
    public static CommonProxy proxy;

    @PreInit
    public void preInit(FMLPreInitializationEvent event) {

        Options.createConfig(event);
        VersionHandler.setType(Reference.type);
        LogHelper.init();
        VersionHandler.init();
        ColourHandler.init();
        checkConnectionStatus();

        event.getModMetadata().authorList = Arrays.asList(new String[] {
                "Darkhax", "MCWizard111", "ShadowChild", "Madcock83"
        });
        event.getModMetadata().autogenerated = false;
        event.getModMetadata().credits = "Maintained by Darkhax, ShadowChild and Madcock83";
        event.getModMetadata().description = "This mod lets you know when the latest DNS packs are released.";

        proxy.registerTickHandler();
        
        //System.out.println(DNSUpdater.class.getResource("/textures/dns/UserCape.png").toString());
    }
    
    private void checkConnectionStatus() {
    	
    	URL url;
    	
    	try {
    		
    		url = new URL("http://dnstechpack.com");
    		url.openConnection();
    		Reference.isOffline = false;
    		
    		LogHelper.log(Level.INFO, "Connection Established!");
    	} catch(Exception e) {
    		
    		LogHelper.log(Level.INFO, "You Are Offline! Using Fallback");
    		Reference.isOffline = true;
    	}
    }
}
